buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

version = mod_version
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "HorsePower-" + mc_version

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

if (System.getenv().BUILD_NUMBER != null) {//adds the build number to the end of the version string if on a build server
    version += ".${System.getenv().BUILD_NUMBER}"
}

def FORGE_GROUP = "net.minecraftforge.test"

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mcp_channel, version: mcp_mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/horsepower_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            ideaModule "${group}.${name}.main"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            ideaModule "${group}.${name}.main"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
    /*maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }

    maven {
        url "http://maven.blamejared.com"
    }

    maven {
        url "http://tehnut.info/maven"
    }

    maven {
        url "http://maven.tterrag.com/"
    }

    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }*/
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "${FORGE_GROUP}:forge:${mc_version}-${forge_version}"


    // compile against the JEI API
    //deobfCompile "mezz.jei:jei_${config.mc_version}:${config.jei_version}:api"
    // at runtime, use the full JEI jar
    //runtime "mezz.jei:jei_${config.mc_version}:${config.jei_version}"

    //deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.9.486"
    //deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-${config.top_version}"

    //deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla_version}"
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', '1.13'

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion': '1.13'
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include '**'
    }
    extension = 'jar'
    classifier = 'sources'
}

artifacts {
    archives devJar
    archives sourceJar
}

/*task signJar(type: SignJar, dependsOn: ["jar", "devJar"]) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStorePass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}*/

// Runs this task automatically when build is ran.
//build.dependsOn signJar

task("uploadJars", dependsOn: "build") {
    description = "uploads JARs"
    if (project.hasProperty("local_maven")) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://${local_maven}")
                    pom.artifactId = "HorsePower"
                    pom.version = mc_version + "-" + project.version
                }
            }
        }
    }
}