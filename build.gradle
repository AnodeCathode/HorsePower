buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

configurations {
    deployerJars
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

version = "${config.mc_version}-${config.mod_version}.${System.getenv("BUILD_NUMBER") ?: config.local_build}"
group = "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "HorsePower"

minecraft {
    version = "1.12.2-14.23.5.2836"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replaceIn "Reference.java"
    replace "@MOD_VERSION@", config.mod_version
    replace "@FINGERPRINT@", project.findProperty('signSHA1')
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }

    maven {
        url "http://maven.blamejared.com"
    }

    maven {
        url "http://tehnut.info/maven"
    }

    maven {
        url "http://maven.tterrag.com/"
    }
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.10"
    // compile against the JEI API
    deobfCompile "mezz.jei:jei_${config.mc_version}:${config.jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${config.mc_version}:${config.jei_version}"

    deobfCompile "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.15.527"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-${config.top_version}"

    deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla_version}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "${config.mob_version}.${System.getenv("BUILD_NUMBER") ?: config.local_build}"
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version': config.mod_version + ".${System.getenv("BUILD_NUMBER") ?: config.local_build}", 'mcversion': project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    rename '(.+_at.cfg)', 'META-INF/$1'
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}

artifacts {
    archives devJar
    archives sourceJar
}

jar {

    manifest {
        attributes 'FMLAT': 'horsepower_at.cfg'
    }
}

task signJar(type: SignJar, dependsOn: ["jar", "devJar"]) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStorePass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran.
build.dependsOn signJar

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("maven_url")) {
                logger.info('Publishing to files server')
                configuration = configurations.deployerJars

                repository(url: project.maven_url) {
                    authentication(userName: project.maven_username ?: "", password: project.maven_password ?: "")
                }
            } else if (project.hasProperty("local_maven")) {
                repository(url: "file://${project.getProperty('local_maven')}")
            }

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.project {
                name project.archivesBaseName
                packaging 'jar'
                description 'HorsePower'
                url 'https://github.com/GoryMoon/HorsePower/'

                scm {
                    url 'https://github.com/GoryMoon/HorsePower/'
                    connection 'scm:git:git://github.com/GoryMoon/HorsePower.git'
                    developerConnection 'scm:git:git@github.com/GoryMoon/HorsePower.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/GoryMoon/HorsePower/issues'
                }

                licenses {
                    license {
                        name 'GNU Lesser General Public License 3.0'
                        url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'Gory_Moon'
                        name 'Gory_Moon'
                        roles {
                            role 'developer'
                        }
                    }
                }
            }
        }
    }
}
